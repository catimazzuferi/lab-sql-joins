USE sakila;
#List the number of films per category.
SELECT c.name as genre_name , COUNT(distinct fc.film_id) as number_of_movies
FROM sakila.category c
JOIN sakila.film_category fc
ON c.category_id = fc.category_id
GROUP BY c.name
ORDER BY c.name ASC;
#Retrieve the store ID, city, and country for each store.
SELECT s.store_id, c.city, co.country
FROM sakila.store s
JOIN sakila.address a
USING (address_id)
JOIN sakila.city c
USING (city_id)
JOIN sakila.country co
USING(country_id); 

#Calculate the total revenue generated by each store in dollars.
SELECT s.store_id,
CONCAT('$', SUM(p.amount)) as 'generated'
FROM sakila.store s
JOIN sakila.customer c
ON s.store_id = c.store_id
JOIN sakila.payment p
ON c.customer_id = p.customer_id
GROUP BY s.store_id;

#Determine the average running time of films for each category.
SELECT fc.category_id, AVG(length) as average
 FROM sakila.film f
 JOIN sakila.film_category fc
 USING (film_id)
 GROUP BY fc.category_id ;
 
 #Identify the film categories with the longest average running time.
 SELECT fc.category_id, AVG(length) as average
 FROM sakila.film f
 JOIN sakila.film_category fc
 USING (film_id)
 GROUP BY fc.category_id 
 ORDER BY average DESC LIMIT 1;
 
#Display the top 10 most frequently rented movies in descending order.
SELECT f.title, f.rental_rate
FROM sakila.film f
ORDER BY f.rental_rate DESC LIMIT 10;

#Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT * FROM INVENTORY;
SELECT i.store_id, (IF(title = 'Academy Dinosaur','Yes','NO')) AS available
FROM inventory i
JOIN film f 
USING(film_id)
WHERE f.title='Academy Dinosaur' and store_id = 1
GROUP BY store_id;

#Provide a list of all distinct film titles, along with their availability status in the inventory. 
#Include a column indicating whether each title is 'Available' or 'NOT available.' 
#Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT DISTINCT f.film_id,f.title,
CASE WHEN inventory_id is NULL THEN 'Not Available'
ELSE "Available"
END AS Availability
FROM film f
LEFT JOIN inventory 
USING (film_id);
